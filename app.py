import streamlit as st
import pandas as pd
import os
import matplotlib
import matplotlib.pyplot as plt
from io import BytesIO
from fpdf import FPDF
import tempfile
from src.file_reader import file_reader

matplotlib.use("agg")

st.title("üìä Analyse comparative des donn√©es COVID")

st.markdown(
    """
    Cette application permet d'analyser et de comparer des donn√©es COVID :
    - Filtrer par pays, r√©gion, ou colonne sp√©cifique.
    - Comparer les cas confirm√©s, d√©c√®s, gu√©risons, cas actifs, etc., entre deux fichiers.
    - G√©n√©rer des visualisations interactives pour les donn√©es crois√©es.
    """
)

# Fonction pour charger un fichier CSV
def load_file(option_label):
    upload_option = st.radio(
        f"üìÇ {option_label} - S√©lectionnez la source du fichier",
        ("Charger un fichier depuis mon ordinateur", "S√©lectionner un fichier local dans `data/`"),
        key=f"{option_label}_radio"
    )

    df = None
    if upload_option == "Charger un fichier depuis mon ordinateur":
        uploaded_file = st.file_uploader(f"T√©l√©chargez un fichier CSV ({option_label})", type=["csv"], key=f"{option_label}_uploader")
        if uploaded_file:
            df = pd.read_csv(uploaded_file)
            st.subheader(f"üëÄ Aper√ßu des donn√©es ({option_label})")
            st.dataframe(df)
    elif upload_option == "S√©lectionner un fichier local dans `data/`":
        data_files = [f for f in os.listdir("data/") if f.endswith(".csv")]
        if data_files:
            selected_file = st.selectbox(
                f"üìÇ Choisissez un fichier ({option_label})",
                data_files,
                key=f"{option_label}_selectbox"
            )
            df = pd.read_csv(os.path.join("data", selected_file))
            st.subheader(f"üëÄ Aper√ßu des donn√©es ({option_label})")
            st.dataframe(df)
        else:
            st.warning(f"Aucun fichier CSV trouv√© dans le r√©pertoire `data/` pour {option_label}.")
    return df

# Fonction pour g√©n√©rer un PDF avec les graphiques
def generate_pdf_with_graphs(dataframe, graphs):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="Donn√©es filtr√©es avec graphiques", ln=True, align='C')

    # Ajout des colonnes
    pdf.set_font("Arial", size=10)
    for column in dataframe.columns:
        pdf.cell(40, 10, txt=str(column), border=1)
    pdf.ln()

    # Ajout des lignes
    for _, row in dataframe.iterrows():
        for value in row:
            pdf.cell(40, 10, txt=str(value), border=1)
        pdf.ln()

    # Ajout des graphiques
    for graph_path in graphs:
        pdf.add_page()
        pdf.image(graph_path, x=10, y=30, w=190)

    pdf_output = pdf.output(dest='S').encode('latin1')
    return BytesIO(pdf_output)

# Fonction pour sauvegarder un graphique temporairement
def save_graph_temp(fig):
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix=".png")
    fig.savefig(temp_file.name)
    return temp_file.name

# Chargement des deux fichiers
st.header("üìÇ Chargement des fichiers")
df1 = load_file("Fichier 1")
df2 = load_file("Fichier 2")

if df1 is not None and df2 is not None:
    st.subheader("üîé Filtrer et comparer les donn√©es")

    # Filtrage par pays/r√©gion
    common_columns = list(set(df1.columns) & set(df2.columns))
    if "Country/Region" in common_columns:
        selected_countries = st.multiselect(
            "Pays ou R√©gions", 
            df1["Country/Region"].unique(), 
            key="filter_countries"
        )
        if selected_countries:
            df1 = df1[df1["Country/Region"].isin(selected_countries)]
            df2 = df2[df2["Country/Region"].isin(selected_countries)]

    if "WHO Region" in common_columns:
        selected_regions = st.multiselect(
            "R√©gions OMS", 
            df1["WHO Region"].unique(), 
            key="filter_regions"
        )
        if selected_regions:
            df1 = df1[df1["WHO Region"].isin(selected_regions)]
            df2 = df2[df2["WHO Region"].isin(selected_regions)]

    # Affichage des donn√©es filtr√©es
    st.write("### Donn√©es filtr√©es - Fichier 1")
    st.dataframe(df1)

    # Exportation des donn√©es filtr√©es avec graphiques
    graphs = []
    numeric_columns1 = df1.select_dtypes(include=["float64", "int64"]).columns
    numeric_columns2 = df2.select_dtypes(include=["float64", "int64"]).columns
    common_numeric_columns = set(numeric_columns1) & set(numeric_columns2)

    if common_numeric_columns:
        st.write("### Graphiques g√©n√©r√©s pour les colonnes num√©riques communes")
        for col in common_numeric_columns:
            fig, ax = plt.subplots(figsize=(10, 6))
            ax.plot(df1[col], label=f"{col} (Fichier 1)", linestyle="-")
            ax.plot(df2[col], label=f"{col} (Fichier 2)", linestyle="--")
            ax.set_title(f"Comparaison pour {col}")
            ax.set_xlabel("Index")
            ax.set_ylabel("Valeurs")
            ax.legend()
            ax.grid(alpha=0.3)
            st.pyplot(fig)
            
            # Sauvegarder le graphique
            graph_path = save_graph_temp(fig)
            graphs.append(graph_path)

    pdf_output = generate_pdf_with_graphs(df1, graphs)
    st.download_button(
        label="T√©l√©charger les donn√©es filtr√©es avec graphiques (PDF)",
        data=pdf_output,
        file_name="donn√©es_filtr√©es_graphiques.pdf",
        mime="application/pdf"
    )
else:
    st.info("üìÇ Veuillez s√©lectionner ou t√©l√©charger deux fichiers CSV pour continuer.")

st.markdown("---")
st.markdown("üí° D√©velopp√© par Nicolas, Ya√´l, Lisa")